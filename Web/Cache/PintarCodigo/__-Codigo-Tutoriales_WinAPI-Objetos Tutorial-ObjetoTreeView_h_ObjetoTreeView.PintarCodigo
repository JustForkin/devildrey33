<div class='Codigo_Marco' id='IDObjetoProgressBar'><div class='Codigo_Titulo'>Archivo : ObjetoTreeView.h</div><div class='Codigo_Numeracion'>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br></div><pre class='Codigo_PRECodigo'><div l=1><span class='TxtNegro'><span class='TxtVerde'>// Clase que hereda ObjetoControlEstandar y se centra en las funciones del TreeView</span></span></div><div l=2><span class='TxtNegro'><span class='TxtAzul'>class</span> ObjetoTreeView : <span class='TxtAzul'>public</span> ObjetoControlEstandar { </span></div><div l=3><span class='TxtNegro'> <span class='TxtAzul'>public</span> : <span class='TxtVerde'>//////// Miembros publicos</span></span></div><div l=4><span class='TxtNegro'>                <span class='TxtVerde'>// -Constructor</span></span></div><div l=5><span class='TxtNegro'>                ObjetoTreeView(<span class='TxtAzul'>void</span>);</span></div><div l=6><span class='TxtNegro'>                <span class='TxtVerde'>// -Destructor</span></span></div><div l=7><span class='TxtNegro'>               ~ObjetoTreeView(<span class='TxtAzul'>void</span>);</span></div><div l=8><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para crear el TreeVuew</span></span></div><div l=9><span class='TxtNegro'>  <span class='TxtAzul'>void</span>          CrearTreeView( HWND hWndParent, <span class='TxtAzul'>const</span> UINT nEstilos, <span class='TxtAzul'>const</span> UINT nID, </span></div><div l=10><span class='TxtNegro'>                               <span class='TxtAzul'>const</span> <span class='TxtAzul'>int</span> cX, <span class='TxtAzul'>const</span> <span class='TxtAzul'>int</span> cY, </span></div><div l=11><span class='TxtNegro'>                               <span class='TxtAzul'>const</span> <span class='TxtAzul'>int</span> cAncho, <span class='TxtAzul'>const</span> <span class='TxtAzul'>int</span> cAlto );</span></div><div l=12><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para agregar nodos</span></span></div><div l=13><span class='TxtNegro'>  HTREEITEM     AgregarNodo(HTREEITEM nPadre, TCHAR *nTexto, <span class='TxtAzul'>const</span> UINT nIDIcono);</span></div><div l=14><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para borrar un nodo y sus hijos</span></span></div><div l=15><span class='TxtNegro'>  <span class='TxtAzul'>void</span>          BorrarNodo(HTREEITEM bNodo);</span></div><div l=16><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para borrar todos los nodos</span></span></div><div l=17><span class='TxtNegro'>  <span class='TxtAzul'>void</span>          BorrarTodo(<span class='TxtAzul'>void</span>);</span></div><div l=18><span class='TxtNegro'>                <span class='TxtVerde'>// -Función que retorna el total de nodos del treeview</span></span></div><div l=19><span class='TxtNegro'>  UINT          TotalNodos(<span class='TxtAzul'>void</span>);</span></div><div l=20><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para obtener el primer nodo root</span></span></div><div l=21><span class='TxtNegro'>  HTREEITEM     NodoRoot(<span class='TxtAzul'>void</span>);</span></div><div l=22><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para obtener el nodo marcado</span></span></div><div l=23><span class='TxtNegro'>  HTREEITEM     NodoMarcado(<span class='TxtAzul'>void</span>);</span></div><div l=24><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para obtener el nodo padre del nodo especificado</span></span></div><div l=25><span class='TxtNegro'>  HTREEITEM     NodoPadre(HTREEITEM pNodo);</span></div><div l=26><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para obtener el primer nodo hijo del nodo especificado</span></span></div><div l=27><span class='TxtNegro'>  HTREEITEM     NodoHijo(HTREEITEM pNodo);</span></div><div l=28><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para obtener el anterior nodo del nodo especificado</span></span></div><div l=29><span class='TxtNegro'>  HTREEITEM     NodoAnterior(HTREEITEM pNodo);</span></div><div l=30><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para obtener el siguiente nodo del nodo especificado</span></span></div><div l=31><span class='TxtNegro'>  HTREEITEM     NodoSiguiente(HTREEITEM pNodo);</span></div><div l=32><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para obtener el texto de un nodo</span></span></div><div l=33><span class='TxtNegro'>  <span class='TxtAzul'>void</span>          ObtenerTexto(HTREEITEM pNodo, TCHAR *nTexto, UINT nTamTexto);</span></div><div l=34><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para asignar el texto de un nodo</span></span></div><div l=35><span class='TxtNegro'>  <span class='TxtAzul'>void</span>          AsignarTexto(HTREEITEM pNodo, TCHAR *nTexto);</span></div><div l=36><span class='TxtNegro'>                <span class='TxtVerde'>// -Función para expandir / contraer nodos</span></span></div><div l=37><span class='TxtNegro'>  <span class='TxtAzul'>void</span>          ExpandirNodo(HTREEITEM pNodo, <span class='TxtAzul'>const</span> <span class='TxtAzul'>bool</span> nExpandir = <span class='TxtAzul'>true</span>);</span></div><div l=38><span class='TxtNegro'> <span class='TxtAzul'>protected</span> : <span class='TxtVerde'>///// Miembros protegidos</span></span></div><div l=39><span class='TxtNegro'>  HFONT        _Fuente;</span></div><div l=40><span class='TxtNegro'>};</span></div></pre></div>