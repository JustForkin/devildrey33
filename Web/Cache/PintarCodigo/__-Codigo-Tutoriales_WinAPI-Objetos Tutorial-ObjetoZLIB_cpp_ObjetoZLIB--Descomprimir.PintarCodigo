<div class='Codigo_Marco' id='IDDescomprimir'><div class='Codigo_Titulo'>Archivo : ObjetoZLIB.cpp</div><div class='Codigo_Numeracion'>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br></div><pre class='Codigo_PRECodigo'><div l=1><span class='TxtNegro'><span class='TxtAzul'>const</span> BOOL ObjetoZLIB::Descomprimir(ContenedorBinario &Datos, <span class='TxtAzul'>const</span> TCHAR *nPathDestino) {</span></div><div l=2><span class='TxtNegro'>    ObjetoArchivo Destino;</span></div><div l=3><span class='TxtNegro'>    <span class='TxtVerde'>// Si el archivo destino no se puede abrir retornamos FALSE</span></span></div><div l=4><span class='TxtNegro'>    <span class='TxtAzul'>if</span> (Destino.AbrirArchivoEscritura(nPathDestino, <span class='TxtAzul'>true</span>) == FALSE) <span class='TxtAzul'>return</span> FALSE;</span></div><div l=5><span class='TxtNegro'></span></div><div l=6><span class='TxtNegro'>    <span class='TxtAzul'>int</span> ret;</span></div><div l=7><span class='TxtNegro'>    <span class='TxtAzul'>unsigned</span> have;</span></div><div l=8><span class='TxtNegro'>    z_stream strm;</span></div><div l=9><span class='TxtNegro'>    <span class='TxtAzul'>char</span> in[CHUNK] = <span class='TxtRojo'>""</span>;</span></div><div l=10><span class='TxtNegro'>    <span class='TxtAzul'>char</span> out[CHUNK] = <span class='TxtRojo'>""</span>;</span></div><div l=11><span class='TxtNegro'></span></div><div l=12><span class='TxtNegro'>    <span class='TxtAzul'>unsigned</span> <span class='TxtAzul'>int</span> Posicion = <span class='TxtRojo'>0</span>;</span></div><div l=13><span class='TxtNegro'></span></div><div l=14><span class='TxtNegro'>    <span class='TxtVerde'>// Inicializaci√≥n</span></span></div><div l=15><span class='TxtNegro'>    strm.zalloc = Z_NULL;</span></div><div l=16><span class='TxtNegro'>    strm.zfree = Z_NULL;</span></div><div l=17><span class='TxtNegro'>    strm.opaque = Z_NULL;</span></div><div l=18><span class='TxtNegro'>    strm.avail_in = <span class='TxtRojo'>0</span>;</span></div><div l=19><span class='TxtNegro'>    strm.next_in = Z_NULL;</span></div><div l=20><span class='TxtNegro'>    ret = inflateInit(&strm);</span></div><div l=21><span class='TxtNegro'>    <span class='TxtAzul'>if</span> (ret != Z_OK) <span class='TxtAzul'>return</span> FALSE;</span></div><div l=22><span class='TxtNegro'></span></div><div l=23><span class='TxtNegro'>    <span class='TxtVerde'>// Descomprimimos hasta que se terminen los datos</span></span></div><div l=24><span class='TxtNegro'>    <span class='TxtAzul'>do</span> {</span></div><div l=25><span class='TxtNegro'>        <span class='TxtAzul'>if</span> (Posicion + CHUNK &lt; Datos.Longitud()) {</span></div><div l=26><span class='TxtNegro'>            memcpy(in, Datos[Posicion], CHUNK);</span></div><div l=27><span class='TxtNegro'>            strm.avail_in = CHUNK;</span></div><div l=28><span class='TxtNegro'>        }</span></div><div l=29><span class='TxtNegro'>        <span class='TxtAzul'>else</span> {</span></div><div l=30><span class='TxtNegro'>            memcpy(in, Datos[Posicion], Datos.Longitud() - Posicion);</span></div><div l=31><span class='TxtNegro'>            strm.avail_in = Datos.Longitud() - Posicion;</span></div><div l=32><span class='TxtNegro'>        }</span></div><div l=33><span class='TxtNegro'>        Posicion += CHUNK;</span></div><div l=34><span class='TxtNegro'></span></div><div l=35><span class='TxtNegro'>        <span class='TxtAzul'>if</span> (strm.avail_in == <span class='TxtRojo'>0</span>)</span></div><div l=36><span class='TxtNegro'>            <span class='TxtAzul'>break</span>;</span></div><div l=37><span class='TxtNegro'>        strm.next_in = <span class='TxtAzul'>reinterpret_cast</span>&lt;Bytef *&gt;(&in[<span class='TxtRojo'>0</span>]);</span></div><div l=38><span class='TxtNegro'></span></div><div l=39><span class='TxtNegro'>        <span class='TxtVerde'>// Ejecutamos inflate para extraer los datos</span></span></div><div l=40><span class='TxtNegro'>        <span class='TxtAzul'>do</span> {</span></div><div l=41><span class='TxtNegro'>            strm.avail_out = CHUNK;</span></div><div l=42><span class='TxtNegro'>            strm.next_out = <span class='TxtAzul'>reinterpret_cast</span>&lt;Bytef *&gt;(&out[<span class='TxtRojo'>0</span>]);</span></div><div l=43><span class='TxtNegro'>            ret = inflate(&strm, Z_NO_FLUSH);</span></div><div l=44><span class='TxtNegro'>            <span class='TxtAzul'>switch</span> (ret) {</span></div><div l=45><span class='TxtNegro'>                <span class='TxtAzul'>case</span> Z_NEED_DICT:</span></div><div l=46><span class='TxtNegro'>                    ret = Z_DATA_ERROR;</span></div><div l=47><span class='TxtNegro'>                <span class='TxtAzul'>case</span> Z_DATA_ERROR:</span></div><div l=48><span class='TxtNegro'>                <span class='TxtAzul'>case</span> Z_MEM_ERROR:</span></div><div l=49><span class='TxtNegro'>                    (<span class='TxtAzul'>void</span>)inflateEnd(&strm);</span></div><div l=50><span class='TxtNegro'>                    <span class='TxtAzul'>return</span> ret;</span></div><div l=51><span class='TxtNegro'>            }</span></div><div l=52><span class='TxtNegro'>            have = CHUNK - strm.avail_out;</span></div><div l=53><span class='TxtNegro'>            Destino.Guardar(out, have);</span></div><div l=54><span class='TxtNegro'>        } <span class='TxtAzul'>while</span> (strm.avail_out == <span class='TxtRojo'>0</span>);</span></div><div l=55><span class='TxtNegro'></span></div><div l=56><span class='TxtNegro'>      <span class='TxtVerde'>// Terminamos cuando inflate retorne Z_STREAM_END</span></span></div><div l=57><span class='TxtNegro'>    } <span class='TxtAzul'>while</span> (ret != Z_STREAM_END);</span></div><div l=58><span class='TxtNegro'></span></div><div l=59><span class='TxtNegro'>    <span class='TxtVerde'>// Liberamos la memoria usada por la ZLIB</span></span></div><div l=60><span class='TxtNegro'>    inflateEnd(&strm);</span></div><div l=61><span class='TxtNegro'>    <span class='TxtAzul'>return</span> (ret == Z_STREAM_END) ? TRUE : FALSE;</span></div><div l=62><span class='TxtNegro'>}</span></div></pre></div>