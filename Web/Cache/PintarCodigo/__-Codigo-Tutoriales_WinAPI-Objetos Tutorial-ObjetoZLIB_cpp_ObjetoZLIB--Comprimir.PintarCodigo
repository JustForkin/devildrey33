<div class='Codigo_Marco' id='IDComprimir'><div class='Codigo_Titulo'>Archivo : ObjetoZLIB.cpp</div><div class='Codigo_Numeracion'>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br></div><pre class='Codigo_PRECodigo'><div l=1><span class='TxtNegro'><span class='TxtAzul'>const</span> BOOL ObjetoZLIB::Comprimir(<span class='TxtAzul'>const</span> TCHAR *nPathOrigen, ContenedorBinario &Datos) {</span></div><div l=2><span class='TxtNegro'>    ObjetoArchivo Origen;</span></div><div l=3><span class='TxtNegro'>    Datos.Borrar();</span></div><div l=4><span class='TxtNegro'>    <span class='TxtVerde'>// Si el archivo origen no se puede abrir retornamos FALSE</span></span></div><div l=5><span class='TxtNegro'>    <span class='TxtAzul'>if</span> (Origen.AbrirArchivoLectura(nPathOrigen) == <span class='TxtAzul'>false</span>) <span class='TxtAzul'>return</span> FALSE;</span></div><div l=6><span class='TxtNegro'></span></div><div l=7><span class='TxtNegro'>    <span class='TxtAzul'>int</span> ret, flush;</span></div><div l=8><span class='TxtNegro'>    <span class='TxtAzul'>unsigned</span> have;</span></div><div l=9><span class='TxtNegro'>    z_stream strm;</span></div><div l=10><span class='TxtNegro'>    <span class='TxtAzul'>char</span> in[CHUNK];</span></div><div l=11><span class='TxtNegro'>    <span class='TxtAzul'>char</span> out[CHUNK];</span></div><div l=12><span class='TxtNegro'></span></div><div l=13><span class='TxtNegro'>    <span class='TxtVerde'>// Inicializaci√≥n</span></span></div><div l=14><span class='TxtNegro'>    strm.zalloc = Z_NULL;</span></div><div l=15><span class='TxtNegro'>    strm.zfree = Z_NULL;</span></div><div l=16><span class='TxtNegro'>    strm.opaque = Z_NULL;</span></div><div l=17><span class='TxtNegro'>    ret = deflateInit(&strm, <span class='TxtRojo'>5</span>);</span></div><div l=18><span class='TxtNegro'>    <span class='TxtAzul'>if</span> (ret != Z_OK) <span class='TxtAzul'>return</span> FALSE;</span></div><div l=19><span class='TxtNegro'></span></div><div l=20><span class='TxtNegro'>    <span class='TxtVerde'>// Comprimimos hasta el final del archivo</span></span></div><div l=21><span class='TxtNegro'>    <span class='TxtAzul'>do</span> {</span></div><div l=22><span class='TxtNegro'>        strm.avail_in = Origen.Leer(&in, CHUNK * <span class='TxtAzul'>sizeof</span>(<span class='TxtAzul'>char</span>));</span></div><div l=23><span class='TxtNegro'>        flush = Origen.FinalDelArchivo() ? Z_FINISH : Z_NO_FLUSH;</span></div><div l=24><span class='TxtNegro'>        strm.next_in = <span class='TxtAzul'>reinterpret_cast</span>&lt;Bytef *&gt;(&in[<span class='TxtRojo'>0</span>]);</span></div><div l=25><span class='TxtNegro'></span></div><div l=26><span class='TxtNegro'>        <span class='TxtVerde'>// Ejecutamos deflate hasta que comprimamos todo el archivo</span></span></div><div l=27><span class='TxtNegro'>        <span class='TxtAzul'>do</span> {</span></div><div l=28><span class='TxtNegro'>            strm.avail_out = CHUNK;</span></div><div l=29><span class='TxtNegro'>            strm.next_out = <span class='TxtAzul'>reinterpret_cast</span>&lt;Bytef *&gt;(&out[<span class='TxtRojo'>0</span>]);</span></div><div l=30><span class='TxtNegro'>            ret = deflate(&strm, flush); </span></div><div l=31><span class='TxtNegro'>            have = CHUNK - strm.avail_out;</span></div><div l=32><span class='TxtNegro'>            Datos.AgregarParte(out, have);</span></div><div l=33><span class='TxtNegro'>        } <span class='TxtAzul'>while</span> (strm.avail_out == <span class='TxtRojo'>0</span>);</span></div><div l=34><span class='TxtNegro'>    </span></div><div l=35><span class='TxtNegro'>    } <span class='TxtAzul'>while</span> (flush != Z_FINISH);</span></div><div l=36><span class='TxtNegro'></span></div><div l=37><span class='TxtNegro'>    <span class='TxtVerde'>// Liberamos la memoria usada por la zlib</span></span></div><div l=38><span class='TxtNegro'>    deflateEnd(&strm);</span></div><div l=39><span class='TxtNegro'>    <span class='TxtAzul'>return</span> TRUE;</span></div><div l=40><span class='TxtNegro'>}</span></div></pre></div>