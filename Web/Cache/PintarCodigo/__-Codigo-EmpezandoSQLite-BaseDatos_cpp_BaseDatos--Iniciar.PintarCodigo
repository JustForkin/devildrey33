<div class='Codigo_Marco' id='BaseDatos_Iniciar'><div class='Codigo_Titulo'>BaseDatos::Iniciar</div><div class='Codigo_Numeracion'>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br></div><pre class='Codigo_PRECodigo'><div l=1><span class='TxtNegro'><span class='TxtVerde'>/* Funci√≥n para iniciar la base de datos, en caso de error retorna FALSE */</span></span></div><div l=2><span class='TxtNegro'><span class='TxtAzul'>const</span> <span class='TxtAzul'>int</span> BaseDatos::Iniciar(<span class='TxtAzul'>void</span>) {</span></div><div l=3><span class='TxtNegro'>    std::wstring TmpStr;</span></div><div l=4><span class='TxtNegro'>    PWSTR Tmp = NULL;</span></div><div l=5><span class='TxtNegro'>    <span class='TxtVerde'>// Obtengo el directorio AppData</span></span></div><div l=6><span class='TxtNegro'>    <span class='TxtAzul'>if</span> (S_OK == SHGetKnownFolderPath(FOLDERID_ProgramData, NULL, <span class='TxtRojo'>0</span>, &Tmp)) {</span></div><div l=7><span class='TxtNegro'>        TmpStr = Tmp;</span></div><div l=8><span class='TxtNegro'>        CoTaskMemFree(Tmp);</span></div><div l=9><span class='TxtNegro'>    }</span></div><div l=10><span class='TxtNegro'>    TmpStr += L<span class='TxtRojo'>"\\Empezando con SQLite\\"</span>;</span></div><div l=11><span class='TxtNegro'>    <span class='TxtVerde'>// Si no existe el directorio "APPDATA\Empezando con SQLite\" lo creo.</span></span></div><div l=12><span class='TxtNegro'>    <span class='TxtAzul'>if</span> (GetFileAttributes(TmpStr.c_str()) == INVALID_FILE_ATTRIBUTES)</span></div><div l=13><span class='TxtNegro'>        CreateDirectory(TmpStr.c_str(), NULL);</span></div><div l=14><span class='TxtNegro'>    <span class='TxtVerde'>// Una vez tenemos acceso a nuestro directorio podemos crear la base de datos.</span></span></div><div l=15><span class='TxtNegro'>    TmpStr += L<span class='TxtRojo'>"Base de Datos.bd"</span>;</span></div><div l=16><span class='TxtNegro'>    <span class='TxtAzul'>int</span> Ret = <span class='TxtRojo'>0</span>;</span></div><div l=17><span class='TxtNegro'>    Ret = sqlite3_open16(TmpStr.c_str(), &_BD);</span></div><div l=18><span class='TxtNegro'>    <span class='TxtAzul'>if</span> (Ret) {    <span class='TxtVerde'>// Error creando la BD</span></span></div><div l=19><span class='TxtNegro'>        <span class='TxtAzul'>const</span> <span class='TxtAzul'>wchar_t</span> *Error = <span class='TxtAzul'>reinterpret_cast</span>&lt;<span class='TxtAzul'>const</span> <span class='TxtAzul'>wchar_t</span> *&gt;(sqlite3_errmsg16(_BD));</span></div><div l=20><span class='TxtNegro'>        std::wcout &lt;&lt; Error &lt;&lt; L<span class='TxtRojo'>"\n"</span>;</span></div><div l=21><span class='TxtNegro'>        sqlite3_close_v2(_BD);</span></div><div l=22><span class='TxtNegro'>        <span class='TxtAzul'>return</span> FALSE;</span></div><div l=23><span class='TxtNegro'>    }</span></div><div l=24><span class='TxtNegro'>    <span class='TxtAzul'>return</span> TRUE;</span></div><div l=25><span class='TxtNegro'>}</span></div></pre></div>